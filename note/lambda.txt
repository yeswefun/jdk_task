


lambda 的语法

Functional Interface

Method Reference

Type Inference

Composing lambdas

Stream
    ForkJoin
        jdk 1.7

execute around pattern




lambda 的语法
    (x) -> { return x + 1 }
    x -> { return x + 1 }
    x -> x + 1

    (x, y) -> { return x + y }
    (x, y) -> x + y


Functional Interface
    JDK 自带的 函数式接口
        Function
        Consumer
        Predicate
        Supplier

    @FunctionalInterface
        只有一个抽象方法的 类 或 接口
            Runnable
            Callable



JDK 自带的 函数式接口
    @FunctionalInterface
    public interface Predicate<T> {
        boolean test(T t);
    }
    类似
        BiPredicate
        IntPredicate
        LongPredicate
        DoublePredicate

    @FunctionalInterface
    public interface Consumer<T> {
        void accept(T t);
    }
    类似
        BiConsumer
        LongConsumer

    @FunctionalInterface
    public interface Function<T, R> {
        R apply(T t);
    }
    类似
        BiFunction
        LongFunction
        IntFunction

    @FunctionalInterface
    public interface Supplier<T> {
        T get();
    }



Lambda的方法推导



Stream
    parallelStream() // ForkJoin


    Source
    Sequence of elements
    Data processing operations

    Pipelining
    Internal iteration


    intermediate operation & terminal operation


    Stream Api


Java之Stream.pdf
    29页


如何获取 Stream

Stream操作
    filter
    distinct
    skip
    limit
    map
    flatmap
        flat: 扁平化

    match -> boolean
        allMatch
        noneMatch
        anyMatch

    find
        Optional
            get
            orElse
            orElseGet
            filter
            map
            ifPresent

    reduce



IntStream
LongStream
DoubleStream


Stream Api 练习


Optinal
    jdk1.8

    empty
    of
    ofNullable

    orElse
    orElseGet
    orElseThrow

    filter
    map

    isPresent
    ifPresent

    OptionalInt
    OptionalLong
    OptionalDouble



functional programming style
    you just tell "how" not "do what".


Collector
    Reduce and summarizing
    Grouping
    Partitioning
    自定义Collector


    /*
        T, Stream<T>
        A, ArrayList::new, HashMap::new
        R,
    */
    public interface Collector<T, A, R> {

        Supplier<A> supplier();

        BiConsumer<A, T> accumulator();

        Function<A, R> finisher();

        BinaryOperator<A> combiner();

        Set<Characteristics> characteristics();
    }

    Characteristics
        CONCURRENT
        UNORDERED
        IDENTITY_FINISH

    Java in action, P189

    Stream 并行计算的基础 Fork Join

    自定义 Collector




Fork(分) Join(合)
    分而治之

    ForkJoinPool
    RecursiveAction
    RecursiveTask

    source 必须可以拆分成相互单独的任务

    Fork Join 是 Stream 的基础


Spliterator



default method
    在 interface 中，存在 default method 和 static method
        default: 向后兼容
        static:

public interface List<E> {

    void add(E e);

//    Stream<E> stream(); // 需要子类重写
    default Stream<E> stream() {
        return ...;
    }
}

public class MyList<E> implements List<E> {

    public void add(E e) {
        //...
    }

//以前需要重写
//    public Stream<E> stream() {
//        //...
//    }
}




LocalDate
LocalTime
Instant
Duration
Period

formater
    Long -> Date
    Date -> Long
    Date -> String
    String -> Date




CompletableFuture
    Mina
    Netty

    Java 多线程设计模式

    jdk 9
        移除 UnSafe



CompletableFuture -> api

    supplyAsync
    thenApply
    whenComplete
    handle
    thenRun
    thenAccept
    thenCompose
    thenCombine
    thenAcceptBoth

    runAfterBoth
    applyToEither
    acceptEither
    runAfterEither
    anyOf
    allOf



springboot
joda-time


重复 是 学习 的最好方法

需求驱动 -> 学习
