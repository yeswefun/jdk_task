
RE - REGular EXpression, regex


匹配规则
    单字符匹配
        普通字符匹配
        元字符匹配
            \d, 任意一个数字
                [0-9]
            \D, 任意一个非数字
                [^0-9]

            \w, 单个单词组成的字符 (单词 是由 字母，数字，下划线 组成的)
                [a-zA-Z0-9_]
            \W

            \s, 空白字符
                空格，\t，\n
            \S

            [abc], a 或 b 或 c
                [123], 1 或 2 或 3
                [0-9]
                [a-z]
                [A-Z]
                [a-zA-Z]
                [^0-9]
                [^a-z]

    多字符匹配
        ., ?, *
            . 任意一个非换行字符
            \. 转义字符\

        {m,}    , m <=
        {m,n}   , m <= <= n
        {,n}    , <= n

    贪婪模式 - 默认模式
        X{0,}   == X*
        X{1,}   == X+
        X{0,1}  == X?

        例子: 13838389438
            \d*(38)     : 贪婪
            \d*?(38)    : 非贪婪

            .*  : 贪婪
            .*? : 非贪婪

    非贪婪模式
        X{0,}   == X*?
        X{1,}   == X+?
        X{0,1}  == X??

    分组
        从 左括号 开始给 组 编号 (编号 从 1 开始)
        分组 的目的是为了 获取 正则匹配的部分内容

        引用
            匿名分组
                \num, num 从 1 开始, 表示引用其匹配的内容

                例子
                    <li><a href="http://www.x.com">haha</a></li>
                    <li><a href='http://www.y.com'>hehe</a></li>

                    <(.*?)><(.*?) href=(['"])(.*?)\3>(.*?)</\2></\1>

            命名分组
                (?<key>正则表达式)

                注: 分组名称不能使用 _ 下划线

                正则匹配到内容 可以通过以下方式进行引用
                    \k<key> - 内部引用
                    ${key}  - 外部引用

                例子
                    <li><a href="http://www.x.com">haha</a></li>
                    <li><a href='http://www.y.com'>hehe</a></li>

                    <(?<li>.*?)><(?<a>.*?) href=(?<quote>['"])(.*?)\k<quote>>(.*?)</\k<a>></\k<li>>

            非捕获分组
                (?:正则表达式) 不捕获匹配的内容，所以不能再引用

    选择
        [comnet], 匹配 c, o, m, n, e, t 单个字符
        com|net, 匹配 com, net 字符串

        例子
            redmi note10
            redmi note11
            redmi k50
            redmi k60

            redmi\s+note10|note11|k50|k60
            redmi\s+(note10|note11|k50|k60)
            redmi\s+(?:note10|note11|k50|k60)

            注: 上面加不加括号是有区别的，圆括号限制选择的范围

        例子
            http://www.a.com/img/abc.png
            https://www.a.com/img/def.jpg
            http://www.a.com/img/ijk.jpeg
            https://www.a.com/img/lmn.gif

            https?.*(?:jpe?g|png|gif)

    限定符
        ^ 开头
            [^a]

        $ 结尾

            例子:
                redmi note10
                redmi note11
                xxx
                ...
                redmi k50
                redmi k60

                ^redmi.*\d+
                注: . 不匹配 换行符

        应用: 数据校验

    断言
        ?= 正向确定断言 - 确定后面，匹配前面
            示例: \w+(?=10|7|8)
                匹配 10|7|8 前面 的单词

            \w+(?=mi)
                xiaomi
                redmi

            \w+(?=\.jpg)
                xxx.jpg

        ?<= 反向确定断言 - 确定前面，匹配后面
            示例: (?<=1[3-9]{2}\d{4})
                提取手机号中间4位数字

            (?<=redmi (?:note|k))\d+
                redmi note10
                redmi note11
                redmi k50
                redmi k60

        ?! 正向否定断言
            示例: ^(?!14)\d{4}
                获取非14开头的4位数字

        ?<! 反射否定断言
            示例: \d{4}(?<!14)$
                匹配以4位数字结尾，且尾部不是14的数字

        xxx开头yyy结尾zzz
            \w+(?=开头)
                xxx
            (?<=开头)\w+
                yyy
            (?!开头)\w+
                xxx
                yyy
                zzz
            \w+(?<!开头)
                xxx
                yyy
                zzz


修饰符
    i, 忽略大小写
        默认区分大小写

    s, dotAll模式
        . 匹配除换行符之外的任意字符
        添加 s 模式，可以使 . 匹配包括换行符在内的所有字符

    m, 多行匹配模式
        ^, $ 以 \n 为一行结尾
        添加 m 模式，可以让 ^, $ 匹配多行

    g, 全局模式
        支持多次匹配

    u, unicode模式
    y, 粘连模式
        匹配的内容是否粘连在一起



Pattern

    static Pattern compile(String regex)
        Compiles the given regular expression into a pattern.

    static Pattern compile(String regex, int flags)
        Compiles the given regular expression into a pattern with the given flags.


    Matcher matcher(CharSequence input)
        Creates a matcher that will match the given input against this pattern.

    static boolean matches(String regex, CharSequence input)
        Compiles the given regular expression and attempts to match the given input against it.


    String[] split(CharSequence input)
        Splits the given input sequence around matches of this pattern.

    String[] split(CharSequence input, int limit)
        Splits the given input sequence around matches of this pattern.

    Stream<String> splitAsStream(CharSequence input)
        Creates a stream from the given input sequence around matches of this pattern.


    PatternSyntaxException


Matcher



分组、捕获、反向引用

1.分组
    一个圆括号包裹的正则表达式是一个分组

    匿名捕获分组, (正则表达式)
    匿名不捕获分组, (?:正则表达式)
    命名捕获分组, (?<分组名称>正则表达式)

2.捕获
    把正则表达式中分组匹配的内容保存到以数字编号或命名的分组里，方便后面引用，
    从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。组0代表的是整个正则式

    注: 是否 捕获 决定了是否可以 反向引用

3.反向引用
    圆括号的内容被捕获后，可以在这个括号后被使用，称为反向引用
    注: 反向引用 引用的是 分组中正则表达式匹配到的内容

    这种引用既可以是在正则表达式内部，也可以是在正则表达式外部，

        匿名捕获分组
            内部反向引用 \\分组号, 外部反向引用 $分组号

        命名捕获分组
            内部反向引用 \\k<分组名称>, 外部反向引用 ${分组名称}



字符串支持正则的方法 - 匹配，替换，分割，获取

    boolean matches(String regex)
        Tells whether or not this string matches the given regular expression.

    String replaceAll(String regex, String replacement)
        Replaces each substring of this string that matches the given regular expression with the given replacement.

    String replaceFirst(String regex, String replacement)
        Replaces the first substring of this string that matches the given regular expression with the given replacement.

    String[] split(String regex)
        Splits this string around matches of the given regular expression.

    String[] split(String regex, int limit)
        Splits this string around matches of the given regular expression.
