

1.原子类型详细讲解
    1.1 AtomicInteger
    1.2 AtomicBoolean
    1.3 AtomicLong
    1.4 AtomicReference
    1.5 AtomicStampedReference
    1.6 AtomicIntegerArray
    1.7 AtomicLongArray
    1.8 AtomicReferenceArray
    1.9 Unsafe




AtomicInteger
    源码分析

    volatile
        保证 可见性，有序性

    CAS: Compare And Swap
        保证 原子性

    compareAndSet
        fast fail, 最快失败

    Number
        public abstract int intValue();
        public abstract long longValue();
        public abstract float floatValue();
        public abstract double doubleValue();



CAS算法原理

    情况一
    volatile int i = 1;
    {
        i = i + 1;
        println(i);
    }

    线程-1               线程-2
    i = 1               i = 1
    i = i + 1 == 2
                        i = i + 1 == 2
    结果(原子性问题)
    2                   2


    情况二
    for (;;) {
        int current = get();
        int next = current + delta;
        if (compareAndSet(current, next)) {
            return current;
        }
    }

    delta == 1
    线程-1               线程-2
    current == 1        current == 1
    next == 2
                        next == 2

    current,1 == value,1
        current == 1
        value == 2
                        current,1 != value,2
                        current == 2
                        next == 3
                        current, 2 == value,2
                            current == 2
                            value == 3


    CAS算法
        也就是CPU级别的同步指令，相当于乐观锁，
        它可以探测到其他线程对共享数据的变化情况。


    最快失败策略


    实现一个显示式锁



AtomicBoolean
    源码分析

    应用
        优雅地关闭线程
        在多线程下操作某个开关
            不需要使用 synchronized, volatile


AtomicLong
    源码分析

    是否支持无锁, lockless
        Y: CAS
        N: 数据总线加锁

    cpu步长
        32bit, 4bytes
            long, 8bytes

        64bit, 8bytes
            long, 8bytes



AtomicReference
    让 自定义对象 须具备 原子类型特性


ABA问题
    如何 值 是一起递增，则不需要考虑 ABA问题

    线程-1               线程-2
    A                   A
    A -> B -> A
                        A -> C, ABA问题, 线程-2不知道A是否发生过改变


AtomicStampedReference

    CAS通过比较内存中的一个数据是否是预期值，
        如果是就将它修改成新值，
        如果不是则进行自旋，重复比较的操作，直到某一刻内存值等于预期值再进行修改。

    ABA问题则是在CAS操作中存在的一个经典问题

    解决 ABA问题 的原理
        类似数据库乐观锁
        带版本号的 Atomic




AtomicIntegerArray
AtomicLongArray
AtomicReferenceArray
    源码分析


AtomicIntegerFieldUpdater
AtomicLongFieldUpdater
AtomicReferenceFieldUpdater
    源码分析


Unsafe
    jdk 9 去掉 unsafe
        C++，汇编指令
        LockSupport

    Unsafe的介绍

    几种 Counter 的性能对比

    java 如何调用 c++
        JNI, Java Native Interface

        javac -h . Hello.java
            生成JNI头文件

        # update-alternatives --config java

        //生成共享库
        # g++ -fPIC -I "/usr/lib/jvm/java-11-openjdk-amd64/include/" -I "/usr/lib/jvm/java-11-openjdk-amd64/include/linux" -c Hello.cpp
        # g++ -shared Hello.o -o libHello.so

        PIC
            位置无关代码 (Position Independent Code)

            gcc 编译四个阶段
                预处理，Pre-Processing
                    gcc -E test.c -o test.i
                编译，Compiling
                    gcc -S test.i -o test.s
                汇编，Assembling
                    gcc -c test.s -o test.o
                链接，Linking
                    gcc test.o -o test

        # export LD_LIBRARY_PATH='/root/test/jni'
            Exception in thread "main" java.lang.UnsatisfiedLinkError:
                no Hello in java.library.path:

        javac Hello.java
        java Hello


    实例化对象，而不调用构造函数
        相当 malloc

    对对象的某个字段进行赋值
        类似反射

    加载类的字节码文件

    计算一个对象的大小
        类似 sizeof(xxx)


    Unsafe 背后的汇编指令



Foo，趣味测试



CAS, ABA
volatile
重排序
happens-before
并发三性: 可见性，有序性，原子性


CAS 轻量级锁


side-effect-free
    无副作用


Lock Free
    无锁


乐观锁


重复是最好的老师

